from django.db import models


# Create your models here.
class Topic(models.Model):  # створюємо клас Topic, що наслідує Model - батьківський клас django
    """Тема яку вивчає користувач"""
    text = models.CharField(max_length=200)  # елемент даних, що складається з символів або тексту
    # max_length=200 --> максимальна довжина
    data_added = models.DateTimeField(auto_now_add=True)  # елемент даних де записано дату та час
    # auto_now_add=True --> автоматично встановлює значення цього атрибуту в поточну дату та час

    def __str__(self):
        """Повернути рядкове представлення моделі"""
        return self.text


class Entry(models.Model):  # Клас Entry(Допис)
    """Якась конкретна інформація до цієї теми:)"""
    topic = models.ForeignKey(Topic, on_delete=models.CASCADE)  # екземпляр класу ForeignKey(Зовнішній ключ)
    # ^ Цей код пов'язує кожен допис з конкретною темою. Кожна тема при створенні отримує в базі даних...
    # ... ключ, або ID. Аргумент <on_delete=models.CASCADE> - означає, що, коли цю тему буде видалено...
    # ... django видалить всі дописи, пов'язані з нею. (це каскадне видалення - a cascading delete).
    text = models.TextField()  # Екземпляр класу TextField. Таке поле не має розумного ліміту.
    data_added = models.DateTimeField(auto_now_add=True)  # Атрибут <data_added> (дата публікації) дозволяє...
    # ... впорядкувати та показувати дописи за часом їхнього створення і ставити timestamp на кожен допис.

    class Meta:  # Вкладаємо клас Meta в клас Entry. Клас Meta містить додаткову інформацію про керування...
        # ... моделлю. Нам він дозволить задати особливий атрибут, що каже django у множині, коли йдеться...
        # ... про більш ніж один допис, використовувати назву Entries. Без цього django автоматично створив...
        # ... би множену, що не відповідає англійській граматиці Entries.
        verbose_name_plural = 'entries'  #

    def __str__(self):  # Описує, яка інформація буде показуватися для окремих дописів.
        """Повертає представлення моделі у string."""
        return f"{self.text[:50]}..."  # Будемо показувати лише перші 50 символів.
